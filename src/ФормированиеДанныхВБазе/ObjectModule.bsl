#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСпискиДляГенерацииДанных()Экспорт

	СформироватьСписокПоставщиковТовара();
	СформироватьСписокВоротПриемкиТовара();
	СформироватьСписокСотрудниковПриемки();

КонецПроцедуры

Процедура ЗарегистрироватьФактическоеРасписаниеСотрудников(ЭтоУбытие, ДатаФиксации)Экспорт

	Запрос = Новый Запрос(ТекстЗапросаПоСостояниюСотрудника());
	Запрос.УстановитьПараметр("СотрудникиПриемки", ЭтотОбъект.СотрудникиПриемки);
	Запрос.УстановитьПараметр("ДатаВыборки", КонецДня(ДатаФиксации));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.усФактическоеРасписаниеРаботыСотрудников.СоздатьМенеджерЗаписи();
		Если РезультатЗапроса.НоваяЗапись Тогда
			МенеджерЗаписи.Период = ДатаФиксации;
			МенеджерЗаписи.Сотрудник = РезультатЗапроса.Сотрудник;
			МенеджерЗаписи.Смена = Справочники.усСмены.ОсновнаяСмена;
			Если ЭтоУбытие Тогда
				МенеджерЗаписи.Окончание = ДатаФиксации;
				МенеджерЗаписи.Начало =РезультатЗапроса.Начало;
			Иначе
				МенеджерЗаписи.Окончание = РезультатЗапроса.Окончание;
				МенеджерЗаписи.Начало = ДатаФиксации;
			КонецЕсли;
			МенеджерЗаписи.Записать();
		Иначе
			МенеджерЗаписи.Период = РезультатЗапроса.Период;
			МенеджерЗаписи.Сотрудник = РезультатЗапроса.Сотрудник;
			МенеджерЗаписи.Начало =РезультатЗапроса.Начало;
			МенеджерЗаписи.Окончание = РезультатЗапроса.Окончание;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				Если ЭтоУбытие Тогда
					МенеджерЗаписи.Окончание = ДатаФиксации;
					МенеджерЗаписи.Начало =РезультатЗапроса.Начало;
				Иначе
					МенеджерЗаписи.Окончание = РезультатЗапроса.Окончание;
					МенеджерЗаписи.Начало = ДатаФиксации;
				КонецЕсли;
				МенеджерЗаписи.Смена = Справочники.усСмены.ОсновнаяСмена;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
		//усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ДатаФиксации, РезультатЗапроса.Сотрудник
		//	, ЭтотОбъект.РабочийПотокПеремещениеКонтейнеров
		//	, ?(ЭтоУбытие, Перечисления.усСостоянияСотрудников.НеРаботает, Перечисления.усСостоянияСотрудников.Работает)
		//	, Справочники.усСмены.ОсновнаяСмена, , ЭтотОбъект.ГруппаПриемки);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьСостояниеСотрудника(ДатаФиксации, Сотрудник, ЭтоУбытие)Экспорт

	усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ДатаФиксации, Сотрудник
			, РабочийПотокПеремещениеКонтейнеров
			, ?(ЭтоУбытие, Перечисления.усСостоянияСотрудников.НеРаботает, Перечисления.усСостоянияСотрудников.Работает)
			, Справочники.усСмены.ОсновнаяСмена, , ГруппаПриемки);

КонецПроцедуры

Процедура ОформитьПоступленияТоваров(ИндексПоставщика, ИндексВорот)Экспорт

	//ОдинЧас = 60*60;
	//ДевятьЧасов = 9 * ОдинЧас;
	//ЧетыреЧаса = 4 * ОдинЧас;
	//ДвадцатьЧасов = 20 * ОдинЧас;
	//КоличествоПоставщиков = ЭтотОбъект.Поставщики.Количество() - 1;
	//КоличествоВорот = ЭтотОбъект.ВоротаПриемки.Количество() - 1;
	//ДатаНачалаОтсчета = НачалоДня(ТекущаяДата()) + ДевятьЧасов;
	//ВремяДоставки = ДатаНачалаОтсчета;
	//ПоследнийИтераторВремени = ДвадцатьЧасов;
	ГенераторИндексов = НовыйГенераторСлучайногоЧисла();
	//ЗарегистрироватьФактическоеРасписаниеСотрудников(СотрудникиПриемки, Ложь, ДатаНачалаОтсчета);
	//Пока ВремяДоставки < ВремяНачалаГенерации Цикл
		//ИндексПоставщика = ГенераторИндексов.СлучайноеЧисло(0, КоличествоПоставщиков);
		//ИндексВорот = ГенераторИндексов.СлучайноеЧисло(0, КоличествоВорот);
		Поставщик = ЭтотОбъект.ПоставщикиТовара[ИндексПоставщика].Ссылка;
		Ворота = ЭтотОбъект.ВоротаПриемки[ИндексВорот].Ссылка;
		ОжидаемаяПриемка = НоваяОжидаемаяПриемкаТовара(Поставщик, Ворота, ТекущаяДата());
		ЗаполнитьОжидаемуюПриемкуТоварами(ОжидаемаяПриемка);
		//Если ПоследнийИтераторВремени = ДвадцатьЧасов Тогда
		//	ВремяДоставки = ВремяДоставки + ЧетыреЧаса;
		//	ПоследнийИтераторВремени = ЧетыреЧаса;
		//Иначе
		//	ВремяДоставки = ВремяДоставки + ДвадцатьЧасов;
		//	ПоследнийИтераторВремени = ДвадцатьЧасов;
		//КонецЕсли;
		мсвДокументов = Новый Массив;
		мсвДокументов.Добавить(ОжидаемаяПриемка);
		усРаботаСоСтатусами.УстановитьСтатусДокументам(мсвДокументов, Перечисления.усСтатусыОжидаемыхПриемок.КВыполнению);
		
		ПриемкаТовара = НоваяПриемкаТовара(ОжидаемаяПриемка);
		ЗаполнитьПриемкуПоОжидаемой(ПриемкаТовара, ОжидаемаяПриемка);
		ЗакрытьПриемку(ПриемкаТовара);
		
		усАлгоритмыРазмещения.СпланироватьРазмещениеДокумента(ПриемкаТовара, Ложь, Перечисления.усВремяПланированияЯчейкиРазмещения.ВМоментСозданияЗадачиНаРазмещение);
		ЭтотОбъект.Приемка = ПриемкаТовара;
		ЗапущенныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		ФоновыеЗадания.ОжидатьЗавершения(ЗапущенныеФоновыеЗадания);
		ЗаполнитьЗадачиПеремещенияКонтенйнеров(ПриемкаТовара)
		//Если ПоследнийИтераторВремени = ДвадцатьЧасов Тогда
		//	ЗарегистрироватьФактическоеРасписаниеСотрудников(СотрудникиПриемки, Истина, ДатаНачалаОтсчета + ДевятьЧасов);
		//Иначе
		//	ЗарегистрироватьФактическоеРасписаниеСотрудников(СотрудникиПриемки, Ложь, ДатаНачалаОтсчета);
		//КонецЕсли;
	//КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьЗадачиПеремещенияКонтенйнеров(ПриемкаТовара)

	Запрос = Новый Запрос(ТестЗапросаЗадачРазмещенияКонтейнеров());
	Запрос.УстановитьПараметр("ДокументОснование", ПриемкаТовара);
	ЭтотОбъект.ЗадачиПеремещенияКонтейнеров.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ЗаполнитьОжидаемуюПриемкуТоварами(ОжидаемаяПриемка)

	Товары = ДоступныеТовары();
	КоличествоТоваров = Товары.Количество() - 1;
	ГСЧ = НовыйГенераторСлучайногоЧисла();
	КоличествоСтрокДокумента = ГСЧ.СлучайноеЧисло(20, 30);
	Для ИндексСтроки = 0 По КоличествоСтрокДокумента Цикл
		ИндексТовара = ГСЧ.СлучайноеЧисло(0, КоличествоТоваров);
		ТоварПоступления = Товары[ИндексТовара];
		СтрокаПриемкиОбъект = Документы.усСтрокаОжидаемойПриемки.СоздатьДокумент();
		СтрокаПриемкиОбъект.Владелец = ОжидаемаяПриемка;
		СтрокаПриемкиОбъект.Номенклатура = ТоварПоступления.Ссылка;
		Количество = ГСЧ.СлучайноеЧисло(10, 20);
		СтрокаПриемкиОбъект.Количество = Количество;
		СтрокаПриемкиОбъект.КоличествоУпаковок = Количество;
		СтрокаПриемкиОбъект.Дата = ОжидаемаяПриемка.Дата;
		СтрокаПриемкиОбъект.СтатусНоменклатуры = Справочники.усСтатусыНоменклатуры.Кондиция;
		СтрокаПриемкиОбъект.ТипКонтейнера = ТоварПоступления.Ссылка.ТипКонтейнераПоУмолчанию;
		СтрокаПриемкиОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПриемкуПоОжидаемой(ПриемкаТовара, ОжидаемаяПриемка)

	Запрос = Новый Запрос(ТекстЗапросаПоПоступившимТоварам());
	Запрос.УстановитьПараметр("ОжидаемаяПриемка", ОжидаемаяПриемка);
	СтрокиОжидаемойПриемки = Запрос.Выполнить().Выбрать();
	ГСЧ = НовыйГенераторСлучайногоЧисла();
	ДесятьМинут = 60 * 10;
	ВремяСозданияСтрокиПриемки = ОжидаемаяПриемка.Дата + ДесятьМинут + ГСЧ.СлучайноеЧисло(30, 90);
	Пока СтрокиОжидаемойПриемки.Следующий() Цикл
		СтрокаПриемки = Документы.усСтрокаПриемки.СоздатьДокумент();
		ТипКонтейнераПоУмолчанию = СтрокиОжидаемойПриемки.ТипКонтейнера;
		Если Не ЗначениеЗаполнено(ТипКонтейнераПоУмолчанию) Тогда
			ТипКонтейнераПоУмолчанию = Справочники.усТипыКонтейнеров.НайтиПоНаименованию("EUR");
		КонецЕсли;
		КонтейнерПриемки = усСервисныеФункции.СоздатьКонтейнер(ТипКонтейнераПоУмолчанию, "", 1);
		КоличествоВКонтейнере = ВместимостьТовараВКонтейнер(СтрокиОжидаемойПриемки.Номенклатура, КонтейнерПриемки);
		КоличествоЗаполнения = СтрокиОжидаемойПриемки.Количество;
		Пока КоличествоЗаполнения > 0 Цикл
			КоличествоДокумента = 0;
			Если КоличествоЗаполнения > КоличествоВКонтейнере
				И КоличествоВКонтейнере > 0 Тогда
				КоличествоДокумента = КоличествоВКонтейнере;
			Иначе
				КоличествоДокумента = КоличествоЗаполнения;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаПриемки, СтрокиОжидаемойПриемки);
			СтрокаПриемки.Контейнер = КонтейнерПриемки;
			СтрокаПриемки.Дата = ВремяСозданияСтрокиПриемки;
			СтрокаПриемки.Владелец = ПриемкаТовара;
			СтрокаПриемки.ОжидаемаяПриемка = ОжидаемаяПриемка;
			СтрокаПриемки.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
			СтрокаПриемки.Ячейка = ПриемкаТовара.ВоротаПриемки;
			СтрокаПриемки.Количество = КоличествоДокумента;
			СтрокаПриемки.КоличествоУпаковок = КоличествоДокумента;
			СтрокаПриемки.Записать(РежимЗаписиДокумента.Проведение);
			
			ВремяЗаполненияСтроки = ГСЧ.СлучайноеЧисло(30, 90);
			ВремяСозданияСтрокиПриемки = ВремяСозданияСтрокиПриемки + ВремяЗаполненияСтроки;
			КоличествоЗаполнения = КоличествоЗаполнения - КоличествоДокумента;
			Если КоличествоЗаполнения > 0 Тогда
				КонтейнерПриемки = усСервисныеФункции.СоздатьКонтейнер(ТипКонтейнераПоУмолчанию, "", 1);
			КонецЕсли;
			ЭтотОбъект.ВремяОкончанияПриемки = ВремяСозданияСтрокиПриемки;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ЗакрытьПриемку(ПриемкаТовара)

	ПриемкаТовараОбъект = ПриемкаТовара.ПолучитьОбъект();
	ПриемкаТовараОбъект.ДополнительныеСвойства.Вставить("Статус", Перечисления.усСтатусыПриемок.Закрыта);
	ПриемкаТовараОбъект.ДополнительныеСвойства.Вставить("СтатусИзменен");
	ПриемкаТовараОбъект.Записать();
	ЗарегестрироватьОжидаемыеПриемкиКПересчетустатуса(ПриемкаТовара);

КонецПроцедуры

Процедура ЗарегестрироватьОжидаемыеПриемкиКПересчетустатуса(ПриемкаТовара)
	
	мсвДляПеререгистрации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	усСтрокаПриемки.ОжидаемаяПриемка
		|ИЗ
		|	Документ.усСтрокаПриемки КАК усСтрокаПриемки
		|ГДЕ
		|	усСтрокаПриемки.Владелец = &Приемка
		|	И усСтрокаПриемки.ПриемкаКонтейнераЗавершена = ИСТИНА";
	
	Запрос.УстановитьПараметр("Приемка", ПриемкаТовара);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мсвДляПеререгистрации.Добавить(Выборка.ОжидаемаяПриемка);
	КонецЦикла;
	
	Если мсвДляПеререгистрации.Количество() Тогда
		усРаботаСоСтатусами.ЗарегистрироватьОжидаемыеПриемкиКРассчетуСтатуса(мсвДляПеререгистрации, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокСотрудниковПриемки()

	Запрос = Новый Запрос(ТекстЗапросаСотрудниковПриемки());
	Запрос.УстановитьПараметр("Группа", ЭтотОбъект.ГруппаПриемки);
	
	ЭтотОбъект.СотрудникиПриемки.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // СкладскиеСотрудникиПриемки()

Процедура СформироватьСписокПоставщиковТовара()

	Запрос = Новый Запрос(ТекстЗапросаПоставщиковТовара());
	Запрос.УстановитьПараметр("ГруппаПоставщиков", ГруппаПоставщиков);
	
	ЭтотОбъект.ПоставщикиТовара.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ПоставщикиТовара()

Процедура СформироватьСписокВоротПриемкиТовара()

	Запрос = Новый Запрос(ТекстЗапросаВоротаПриемки());
	Запрос.УстановитьПараметр("ЗонаПриемки", ЗонаВоротПриемки);
	
	ЭтотОбъект.ВоротаПриемки.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ВоротаПриемкиТовара()

Функция НоваяПриемкаТовара(ОжидаемаяПриемка)

	ДесятьМинут = 60 * 10;
	ПриемкаОбъект = Документы.усПриемка.СоздатьДокумент();
	ПриемкаОбъект.Заполнить(ОжидаемаяПриемка);
	ПриемкаОбъект.Дата = ОжидаемаяПриемка.Дата + ДесятьМинут;
	ПриемкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	мсвДокументов = Новый Массив;
	мсвДокументов.Добавить(ПриемкаОбъект.Ссылка);
	усРаботаСоСтатусами.УстановитьСтатусДокументам(мсвДокументов, Перечисления.усСтатусыПриемок.КВыполнению);
	усРаботаСоСтатусами.УстановитьСтатусДокументам(мсвДокументов, Перечисления.усСтатусыПриемок.ВРаботе);
	
	Возврат ПриемкаОбъект.Ссылка;

КонецФункции // НоваяПриемкаТовара()

Функция НоваяОжидаемаяПриемкаТовара(Поставщик, Ворота, ДатаПриемки)

	ДокументОбъект = Документы.усОжидаемаяПриемка.СоздатьДокумент();
	ДокументОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.ВажностьЗадач = Перечисления.усВажностьЗадач.Обычная;
	ДокументОбъект.ВоротаПриемки = Ворота;
	ДокументОбъект.Дата = ДатаПриемки;
	ДокументОбъект.ДатаПоступления = ДатаПриемки;
	ДокументОбъект.ИсточникПоступления = Справочники.усИсточникиПоступления.ПриемкаОтПоставщика;
	ДокументОбъект.Контрагент = Поставщик;
	ДокументОбъект.СтадииПриемки = Справочники.усСтадииПриемки.БазоваяНастройка;
	ДокументОбъект.ДополнительныеСвойства.Вставить("Статус", Перечисления.усСтатусыОжидаемыхПриемок.Новая);
	ДокументОбъект.Организация = ОрганизацияДокументов();
	ДокументОбъект.Записать();
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции // НоваяОжидаемаяПриемкаТовара()

Функция ДоступныеТовары()

	Запрос = Новый Запрос(ТекстЗапросаТоваров());
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ДоступныеТовары()

Функция НовыйГенераторСлучайногоЧисла()

	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата() - Дата("00010101"));
	
	Возврат ГСЧ;

КонецФункции // НовыйГенераторСлучайногоЧисла()

Функция ОрганизацияДокументов()

	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		Организация = ВыборкаОрганизаций.Ссылка;
		Прервать;
	КонецЦикла;
	
	Возврат Организация;

КонецФункции // ОрганизацияДокументов()

Функция ВместимостьТовараВКонтейнер(Номенклатура, Контейнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	усВместимостьКонтейнеров.Количество,
	|	усВместимостьКонтейнеров.КоличествоВСлое,
	|	ВЫБОР
	|		КОГДА усВместимостьКонтейнеров.КоличествоВСлое = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(усВместимостьКонтейнеров.Количество / усВместимостьКонтейнеров.КоличествоВСлое КАК ЧИСЛО(5, 0))
	|	КОНЕЦ КАК КоличествоСлоев,
	|	ЕСТЬNULL(усВместимостьКонтейнеров.УпаковкаНоменклатуры.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	РегистрСведений.усВместимостьКонтейнеров КАК усВместимостьКонтейнеров
	|ГДЕ
	|	усВместимостьКонтейнеров.Номенклатура = &Номенклатура
	|	И усВместимостьКонтейнеров.ТипКонтейнера = ВЫРАЗИТЬ(&Контейнер КАК Справочник.усКонтейнеры).ТипКонтейнера";
	
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Количество = Результат.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
	
	Возврат Количество;
	
КонецФункции // ПолучитьУкладку()

#Область ТекстыЗапросов

Функция ТекстЗапросаПоставщиковТовара()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.усКонтрагенты КАК усКонтрагенты
	|ГДЕ
	|	усКонтрагенты.Родитель В ИЕРАРХИИ(&ГруппаПоставщиков)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПоставщиковТовара()

Функция ТекстЗапросаВоротаПриемки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усЯчейки.Ссылка
	|ИЗ
	|	Справочник.усЯчейки КАК усЯчейки
	|ГДЕ
	|	усЯчейки.Зона = &ЗонаПриемки";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВоротаПриемки()

Функция ТекстЗапросаТоваров()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усНоменклатура.Ссылка
	|ИЗ
	|	Справочник.усНоменклатура КАК усНоменклатура
	|ГДЕ
	|	НЕ усНоменклатура.ЭтоГруппа
	|	И усНоменклатура.МодельУчета <> ЗНАЧЕНИЕ(Справочник.усМоделиУчетаНоменклатуры.ПустаяСсылка)
	|	И НЕ усНоменклатура.МодельУчета.ВестиПартионныйУчет";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТоваров()

Функция ТекстЗапросаПоПоступившимТоварам()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усСтрокаОжидаемойПриемки.Номенклатура,
	|	усСтрокаОжидаемойПриемки.УпаковкаНоменклатуры,
	|	усСтрокаОжидаемойПриемки.КоличествоУпаковок,
	|	усСтрокаОжидаемойПриемки.ТипКонтейнера,
	|	усСтрокаОжидаемойПриемки.СтатусНоменклатуры,
	|	усСтрокаОжидаемойПриемки.ПартияНоменклатуры,
	|	усСтрокаОжидаемойПриемки.Количество,
	|	усСтрокаОжидаемойПриемки.Цена,
	|	усСтрокаОжидаемойПриемки.СтавкаНДС
	|ИЗ
	|	Документ.усСтрокаОжидаемойПриемки КАК усСтрокаОжидаемойПриемки
	|ГДЕ
	|	усСтрокаОжидаемойПриемки.Владелец = &ОжидаемаяПриемка";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПоПоступившимТоварам()

Функция ТестЗапросаЗадачРазмещенияКонтейнеров()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усЗадачаПеремещениеКонтейнера.Ссылка
	|ИЗ
	|	Документ.усЗадачаПеремещениеКонтейнера КАК усЗадачаПеремещениеКонтейнера
	|ГДЕ
	|	усЗадачаПеремещениеКонтейнера.ДокументОснование = &ДокументОснование
	|	И усЗадачаПеремещениеКонтейнера.КонечнаяЯчейка <> ЗНАЧЕНИЕ(Справочник.усЯчейки.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТестЗапросаЗадачРазмещенияКонтейнеров()

Функция ТекстЗапросаСотрудниковПриемки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	усСкладскиеСотрудники.Ссылка КАК Сотрудник,
	|	усСкладскиеСотрудники.ГрафикРабот КАК ГрафикРаботы
	|ИЗ
	|	Справочник.усСкладскиеСотрудники КАК усСкладскиеСотрудники
	|ГДЕ
	|	усСкладскиеСотрудники.Группа = &Группа";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСотрудниковПриемки()

Функция ТекстЗапросаПоСостояниюСотрудника()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиПриемки.Сотрудник,
	|	СотрудникиПриемки.ГрафикРаботы
	|ПОМЕСТИТЬ втСотрудникиПриемки
	|ИЗ
	|	&СотрудникиПриемки КАК СотрудникиПриемки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усФактическоеРасписаниеРаботыСотрудниковСрезПоследних.Период,
	|	усФактическоеРасписаниеРаботыСотрудниковСрезПоследних.Сотрудник,
	|	усФактическоеРасписаниеРаботыСотрудниковСрезПоследних.Окончание,
	|	усФактическоеРасписаниеРаботыСотрудниковСрезПоследних.Начало,
	|	усФактическоеРасписаниеРаботыСотрудниковСрезПоследних.Смена
	|ПОМЕСТИТЬ втСотрудникиВРасписании
	|ИЗ
	|	РегистрСведений.усФактическоеРасписаниеРаботыСотрудников.СрезПоследних(&ДатаВыборки, ) КАК усФактическоеРасписаниеРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСотрудникиВРасписании.Период, &ПустаяДата) КАК Период,
	|	втСотрудникиПриемки.Сотрудник,
	|	втСотрудникиПриемки.ГрафикРаботы,
	|	ЕСТЬNULL(втСотрудникиВРасписании.Окончание, &ПустаяДата) КАК Окончание,
	|	ЕСТЬNULL(втСотрудникиВРасписании.Начало, &ПустаяДата) КАК Начало,
	|	ВЫБОР
	|		КОГДА втСотрудникиВРасписании.Период ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяЗапись
	|ИЗ
	|	втСотрудникиПриемки КАК втСотрудникиПриемки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСотрудникиВРасписании КАК втСотрудникиВРасписании
	|		ПО втСотрудникиПриемки.Сотрудник = втСотрудникиВРасписании.Сотрудник";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПоСостояниюСотрудника()

#КонецОбласти

#КонецОбласти